/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * NWL Connect Node
 * OpenAPI spec version: 0.0.1
 */
export type PostSubscriptionsBody = {
  name: string
  email: string
  /** @nullable */
  referrer?: string | null
}

export type PostSubscriptions201 = {
  subscriberId: string
}

export type GetSubscribersSubscriberIdRankingClicks200 = {
  count: number
}

export type GetSubscribersSubscriberIdRankingCount200 = {
  count: number
}

export type GetSubscribersSubscriberIdRankingPlacement200 = {
  /** @nullable */
  placement: number | null
}

export type GetRanking200RankingItem = {
  id: string
  name: string
  score: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @summary Subscribes to the event
 */
export const getPostSubscriptionsUrl = () => {
  return `http://localhost:3333/subscriptions`
}

export const postSubscriptions = async (
  postSubscriptionsBody: PostSubscriptionsBody,
  options?: RequestInit
): Promise<PostSubscriptions201> => {
  const res = await fetch(getPostSubscriptionsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postSubscriptionsBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Access invite link and redirect user
 */
export const getInvitesSubscriberIdUrl = (subscriberId: string) => {
  return `http://localhost:3333/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (
  subscriberId: string,
  options?: RequestInit
): Promise<unknown> => {
  const res = await fetch(getInvitesSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invite clicks
 */
export const getSubscriberRankingClicksURl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscriberRankingClicks = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingClicks200> => {
  const res = await fetch(getSubscriberRankingClicksURl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get subscriber invites count
 */
export const getSubscriberRankingCountUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscriberRankingCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingCount200> => {
  const res = await fetch(getSubscriberRankingCountUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get subscriber rank placement
 */
export const getSubscriberRankingPlacementUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/placement`
}

export const getSubscriberRankingPlacement = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscribersSubscriberIdRankingPlacement200> => {
  const res = await fetch(getSubscriberRankingPlacementUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingPlacement200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
  return `http://localhost:3333/ranking`
}

export const getRanking = async (
  options?: RequestInit
): Promise<GetRanking200> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
